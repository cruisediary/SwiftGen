//: #### Other pages
//:
//: * [Demo for `colors` parser](Colors-Demo)
//: * Demo for `coredata` parser
//: * [Demo for `fonts` parser](Fonts-Demo)
//: * [Demo for `ib` parser](InterfaceBuilder-Demo)
//: * [Demo for `json` parser](JSON-Demo)
//: * [Demo for `plist` parser](Plist-Demo)
//: * [Demo for `strings` parser](Strings-Demo)
//: * [Demo for `xcassets` parser](XCAssets-Demo)
//: * [Demo for `yaml` parser](YAML-Demo)

//: #### Example of code generated by `coredata` parser with "swift5" template

import CoreData
import Foundation

public enum IntegerEnum: Int16 {
	case test1
	case test2
}
public enum StringEnum: String {
	case test1
	case test2
	case test3
}

// MARK: - MainEntity

@objc(MainEntity)
class MainEntity: NSManagedObject {
  class var entityName: String {
    return "MainEntity"
  }

  class func entity(in managedObjectContext: NSManagedObjectContext) -> NSEntityDescription? {
    return NSEntityDescription.entity(forEntityName: entityName, in: managedObjectContext)
  }

  @nonobjc class func makeFetchRequest() -> NSFetchRequest<MainEntity> {
    return NSFetchRequest<MainEntity>(entityName: entityName)
  }

  // swiftlint:disable implicitly_unwrapped_optional
  @NSManaged var attributedString: NSAttributedString?
  @NSManaged var binaryData: Data?
  @NSManaged var boolean: Bool
  @NSManaged var date: Date?
  @NSManaged var decimal: NSDecimalNumber?
  @NSManaged var double: Double
  @NSManaged var float: Float
  @NSManaged var int16: Int16
  @NSManaged var int32: Int32
  @NSManaged var int64: Int64
  var integerEnum: IntegerEnum {
    get {
      let key = "integerEnum"
      willAccessValue(forKey: key)
      defer { didAccessValue(forKey: key) }

      guard let value = primitiveValue(forKey: key) as? IntegerEnum.RawValue,
        let result = IntegerEnum(rawValue: value) else {
        fatalError("Could not convert value for key '\(key)' to type 'IntegerEnum'")
      }
      return result
    }
    set {
      let key = "integerEnum"
      willChangeValue(forKey: key)
      defer { didChangeValue(forKey: key) }

      setPrimitiveValue(newValue.rawValue, forKey: key)
    }
  }
  @NSManaged var string: String
  var stringEnum: StringEnum? {
    get {
      let key = "stringEnum"
      willAccessValue(forKey: key)
      defer { didAccessValue(forKey: key) }

      guard let value = primitiveValue(forKey: key) as? StringEnum.RawValue else {
        return nil
      }
      return StringEnum(rawValue: value)
    }
    set {
      let key = "stringEnum"
      willChangeValue(forKey: key)
      defer { didChangeValue(forKey: key) }

      setPrimitiveValue(newValue?.rawValue, forKey: key)
    }
  }
  @NSManaged var transformable: AnyObject?
  @NSManaged var transient: String?
  @NSManaged var uri: URL?
  @NSManaged var uuid: UUID?
  // swiftlint:enable implicitly_unwrapped_optional
}

//: #### Usage Example

let container: NSPersistentContainer = createContainer()
let context: NSManagedObjectContext = container.viewContext

let item = MainEntity(context: context)
item.date = Date()
item.boolean = true
item.string = "test"

do {
  let newObjectsCount = context.insertedObjects.count
  print("Preparing to save \(newObjectsCount)")

  try context.save()
  print("Saved")
} catch {
  fatalError("Unresolved error \(error)")
}

do {
    let fetchRequest = MainEntity.makeFetchRequest()
    let count = try context.count(for: fetchRequest)
    print("Found \(count) assets")
} catch {
    fatalError("Unresolved error \(error)")
}
